1. What are the Features of Spring Boot?
########################################
There are many useful features of Spring Boot. Some of them are mentioned below:
Auto-configuration – 
  Spring Boot automatically configures dependencies by using @EnableAutoconfiguration annotation and reduces boilerplate code.
Spring Boot Starter POM(Project Object Model) – 
  These Starter POMs are pre-configured dependencies for functions like database, security, maven configuration etc.
Spring Boot CLI (Command Line Interface) – 
  This command line tool is generally for managing dependencies, creating projects and running the applications.
Actuator – 
  Spring Boot Actuator provides health check, metrics and monitors the endpoints of the application. 
  It also simplifies the troubleshooting management.
Embedded Servers – 
  Spring Boot contains embedded servers like Tomcat and Jetty for quick application run. No need of external servers.

2. Why Spring Boot over Spring?
#################################
Spring Boot simplifies the spring features for the user.
Below are some key points which spring boot offers but spring doesn’t:

Starter POM.
Version Management.
Auto Configuration.
Component Scanning.
Embedded server.
InMemory DB.
Actuators
 
4. SB Annotations
#################
@SpringBootApplication
-----------@SpringBootApplication annotation combines @Configuration, @EnableAutoConfiguration and @ComponentScan annotations.
@AutoConfiguration
-----------This annotation automatically configuring beans in the class path 
            and automatically scans the dependencies according to the application need.
@Autowired
----------Spring provides annotation-based auto-wiring by providing @Autowired annotation. 
          It is used to autowire spring bean on setter methods, instance variable, and constructor. 
          When we use @Autowired annotation, the spring container auto-wires the bean by matching data-type.
@Bean
----------It is a method-level annotation. 
          It is an alternative of XML <bean> tag. 
          It tells the method to produce a bean to be managed by Spring Container.
@Component
----------It is a class-level annotation. It is used to mark a Java class as a bean. 
          A Java class annotated with @Component is found during the classpath. 
          The Spring Framework pick it up and configure it in the application context as a Spring Bean.
@ComponentScan
-----------This annotation scans the components (@Component, @Service, etc.) in the package of annotated class and its sub-packages.
@Controller
------------The @Controller is a class-level annotation. It is a specialization of @Component. 
            It marks a class as a web request handler. It is often used to serve web pages. 
            By default, it returns a string that indicates which route to redirect. It is mostly used with @RequestMapping annotation.
@Configuration
-----------This annotation configures the beans and packages in the class path. It is a class-level annotation. 
            The class annotated with @Configuration used by Spring Containers as a source of bean definitions.
@Required
-----------It applies to the bean setter method. It indicates that the annotated bean must be populated at configuration time 
           with the required property, else it throws an exception BeanInitilizationException.
@Repository
-----------It is a class-level annotation. The repository is a DAOs (Data Access Object) that access the database directly. 
            The repository does all the operations related to the database.
@Service
-----------It is also used at class level. It tells the Spring that class contains the business logic.
@EnableAutoConfiguration
-----------It auto-configures the bean that is present in the classpath and configures it to run the methods. 
            The use of this annotation is reduced in Spring Boot 1.2.0 release because developers provided an alternative of the annotation, 
            i.e. @SpringBootApplication.
            @SpringBootApplication: It is a combination of three annotations @EnableAutoConfiguration, @ComponentScan, and @Configuration.

Spring MVC and REST Annotations
===============================
@RequestMapping:
-------It is used to map the web requests. It has many optional elements like consumes, header, method, name, params, path, produces, and value. 
        We use it with the class as well as the method.
@RequestBody:
-------It is used to bind HTTP request with an object in a method parameter. Internally it uses HTTP MessageConverters to convert the body of the request.
        When we annotate a method parameter with @RequestBody, the Spring framework binds the incoming HTTP request body to that parameter.
@ResponseBody: 
--------It binds the method return value to the response body. 
        It tells the Spring Boot Framework to serialize a return an object into JSON and XML format.
@PathVariable: 
--------It is used to extract the values from the URI. It is most suitable for the RESTful web service, where the URL contains a path variable.
        We can define multiple @PathVariable in a method.
@RequestParam: 
--------It is used to extract the query parameters form the URL. It is also known as a query parameter. It is most suitable for web applications. 
        It can specify default values if the query parameter is not present in the URL.
@RequestHeader: 
--------It is used to get the details about the HTTP request headers. We use this annotation as a method parameter. 
        The optional elements of the annotation are name, required, value, defaultValue. For each detail in the header, we should specify separate annotations. 
        We can use it multiple time in a method
@RestController: 
--------It can be considered as a combination of @Controller and @ResponseBody annotations. 
        The @RestController annotation is itself annotated with the @ResponseBody annotation. 
        It eliminates the need for annotating each method with @ResponseBody.
@RequestAttribute: 
--------It binds a method parameter to request attribute. It provides convenient access to the request attributes from a controller method. 
        With the help of @RequestAttribute annotation, we can access objects that are populated on the server-side.
